"""New backend

Revision ID: 389288575d54
Revises: ff416380db04
Create Date: 2025-09-14 12:20:07.529106

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "389288575d54"
down_revision = "ff416380db04"
branch_labels: tuple[str] | None = None
depends_on: tuple[str] | None = None


def convert_to_jsonb(table: str, column: str) -> None:
    op.execute(f"UPDATE {table} SET {column} = '{{}}' WHERE {column} IS NULL")  # noqa: S608
    op.alter_column(
        table,
        column,
        existing_type=postgresql.JSON(astext_type=sa.Text()),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        nullable=False,
    )


def prepare_to_cascade(table: str, column1: str, column2: str) -> None:
    op.execute(f"DELETE FROM {table} WHERE {column1} IS NULL OR {column2} IS NULL")  # noqa: S608


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("discounts", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("discounts", "name", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("discounts", "percent", existing_type=sa.INTEGER(), nullable=False)
    convert_to_jsonb("discounts", "metadata")
    op.add_column("files", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    convert_to_jsonb("files", "metadata")
    op.add_column("invoices", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("invoices", "currency", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("invoices", "expiration", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column("invoices", "tx_hashes", existing_type=postgresql.ARRAY(sa.TEXT()), nullable=False)
    convert_to_jsonb("invoices", "metadata")
    op.add_column("notifications", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("notifications", "name", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("notifications", "provider", existing_type=sa.TEXT(), nullable=False)
    convert_to_jsonb("notifications", "data")
    convert_to_jsonb("notifications", "metadata")
    op.add_column("paymentmethods", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("paymentmethods", "rate", existing_type=sa.NUMERIC(precision=36, scale=18), nullable=False)
    op.alter_column("paymentmethods", "currency", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("paymentmethods", "symbol", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("paymentmethods", "lookup_field", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("paymentmethods", "lightning", existing_type=sa.BOOLEAN(), nullable=False)
    op.alter_column("paymentmethods", "divisibility", existing_type=sa.INTEGER(), nullable=False)
    op.execute("UPDATE paymentmethods SET is_used = false WHERE is_used IS NULL")
    op.alter_column("paymentmethods", "is_used", existing_type=sa.BOOLEAN(), nullable=False)
    convert_to_jsonb("paymentmethods", "metadata")
    op.add_column("payouts", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("payouts", "destination", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("payouts", "currency", existing_type=sa.TEXT(), nullable=False)
    convert_to_jsonb("payouts", "metadata")
    op.add_column("products", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("products", "name", existing_type=sa.TEXT(), nullable=False)
    convert_to_jsonb("products", "templates")
    convert_to_jsonb("products", "metadata")
    op.alter_column("productsxinvoices", "count", existing_type=sa.INTEGER(), nullable=False)
    op.add_column("refunds", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("refunds", "currency", existing_type=sa.TEXT(), nullable=False)
    convert_to_jsonb("refunds", "metadata")
    op.add_column("settings", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("settings", "name", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("settings", "value", existing_type=sa.TEXT(), nullable=False)
    op.add_column("stores", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("stores", "name", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("stores", "default_currency", existing_type=sa.TEXT(), nullable=False)
    convert_to_jsonb("stores", "email_settings")
    convert_to_jsonb("stores", "checkout_settings")
    convert_to_jsonb("stores", "theme_settings")
    convert_to_jsonb("stores", "plugin_settings")
    convert_to_jsonb("stores", "templates")
    convert_to_jsonb("stores", "metadata")
    op.add_column("templates", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("templates", "name", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("templates", "text", existing_type=sa.TEXT(), nullable=False)
    convert_to_jsonb("templates", "metadata")
    op.add_column("tokens", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("tokens", "permissions", existing_type=postgresql.ARRAY(sa.TEXT()), nullable=False)
    convert_to_jsonb("tokens", "metadata")
    op.add_column("users", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("users", "email", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("users", "hashed_password", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("users", "is_superuser", existing_type=sa.BOOLEAN(), nullable=False)
    op.alter_column("users", "is_verified", existing_type=sa.BOOLEAN(), nullable=False)
    op.alter_column("users", "is_enabled", existing_type=sa.BOOLEAN(), nullable=False)
    op.alter_column("users", "totp_key", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("users", "tfa_enabled", existing_type=sa.BOOLEAN(), nullable=False)
    op.alter_column("users", "recovery_codes", existing_type=postgresql.ARRAY(sa.TEXT()), nullable=False)
    op.alter_column(
        "users",
        "fido2_devices",
        existing_type=postgresql.ARRAY(postgresql.JSON(astext_type=sa.Text())),
        type_=postgresql.ARRAY(postgresql.JSONB(astext_type=sa.Text())),
        nullable=False,
    )
    convert_to_jsonb("users", "settings")
    convert_to_jsonb("users", "metadata")
    op.add_column("wallets", sa.Column("updated", sa.TIMESTAMP(timezone=True), nullable=True))
    op.alter_column("wallets", "name", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("wallets", "xpub", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("wallets", "currency", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("wallets", "lightning_enabled", existing_type=sa.BOOLEAN(), nullable=False)
    convert_to_jsonb("wallets", "additional_xpub_data")
    convert_to_jsonb("wallets", "metadata")

    prepare_to_cascade("discountsxproducts", "discount_id", "product_id")
    op.alter_column("discountsxproducts", "discount_id", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("discountsxproducts", "product_id", existing_type=sa.TEXT(), nullable=False)
    op.drop_constraint(op.f("discountsxproducts_discount_id_discounts_fkey"), "discountsxproducts", type_="foreignkey")
    op.drop_constraint(op.f("discountsxproducts_product_id_products_fkey"), "discountsxproducts", type_="foreignkey")
    op.create_foreign_key(
        op.f("discountsxproducts_product_id_products_fkey"),
        "discountsxproducts",
        "products",
        ["product_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("discountsxproducts_discount_id_discounts_fkey"),
        "discountsxproducts",
        "discounts",
        ["discount_id"],
        ["id"],
        ondelete="CASCADE",
    )
    prepare_to_cascade("notificationsxstores", "notification_id", "store_id")
    op.alter_column("notificationsxstores", "notification_id", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("notificationsxstores", "store_id", existing_type=sa.TEXT(), nullable=False)
    op.drop_constraint(op.f("notificationsxstores_store_id_stores_fkey"), "notificationsxstores", type_="foreignkey")
    op.drop_constraint(
        op.f("notificationsxstores_notification_id_notifications_fkey"), "notificationsxstores", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("notificationsxstores_store_id_stores_fkey"),
        "notificationsxstores",
        "stores",
        ["store_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("notificationsxstores_notification_id_notifications_fkey"),
        "notificationsxstores",
        "notifications",
        ["notification_id"],
        ["id"],
        ondelete="CASCADE",
    )
    prepare_to_cascade("productsxinvoices", "product_id", "invoice_id")
    op.alter_column("productsxinvoices", "product_id", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("productsxinvoices", "invoice_id", existing_type=sa.TEXT(), nullable=False)
    op.drop_constraint(op.f("productsxinvoices_product_id_products_fkey"), "productsxinvoices", type_="foreignkey")
    op.drop_constraint(op.f("productsxinvoices_invoice_id_invoices_fkey"), "productsxinvoices", type_="foreignkey")
    op.create_foreign_key(
        op.f("productsxinvoices_invoice_id_invoices_fkey"),
        "productsxinvoices",
        "invoices",
        ["invoice_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("productsxinvoices_product_id_products_fkey"),
        "productsxinvoices",
        "products",
        ["product_id"],
        ["id"],
        ondelete="CASCADE",
    )
    prepare_to_cascade("walletsxstores", "wallet_id", "store_id")
    op.alter_column("walletsxstores", "wallet_id", existing_type=sa.TEXT(), nullable=False)
    op.alter_column("walletsxstores", "store_id", existing_type=sa.TEXT(), nullable=False)
    op.drop_constraint(op.f("walletsxstores_wallet_id_wallets_fkey"), "walletsxstores", type_="foreignkey")
    op.drop_constraint(op.f("walletsxstores_store_id_stores_fkey"), "walletsxstores", type_="foreignkey")
    op.create_foreign_key(
        op.f("walletsxstores_wallet_id_wallets_fkey"), "walletsxstores", "wallets", ["wallet_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        op.f("walletsxstores_store_id_stores_fkey"), "walletsxstores", "stores", ["store_id"], ["id"], ondelete="CASCADE"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "wallets",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "wallets",
        "additional_xpub_data",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column("wallets", "lightning_enabled", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column("wallets", "currency", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("wallets", "xpub", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("wallets", "name", existing_type=sa.TEXT(), nullable=True)
    op.drop_column("wallets", "updated")
    op.alter_column(
        "users",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "users",
        "settings",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "users",
        "fido2_devices",
        existing_type=postgresql.ARRAY(postgresql.JSONB(astext_type=sa.Text())),
        type_=postgresql.ARRAY(postgresql.JSON(astext_type=sa.Text())),
        nullable=True,
    )
    op.alter_column("users", "recovery_codes", existing_type=postgresql.ARRAY(sa.TEXT()), nullable=True)
    op.alter_column("users", "tfa_enabled", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column("users", "totp_key", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("users", "is_enabled", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column("users", "is_verified", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column("users", "is_superuser", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column("users", "hashed_password", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("users", "email", existing_type=sa.TEXT(), nullable=True)
    op.drop_column("users", "updated")
    op.alter_column(
        "tokens",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column("tokens", "permissions", existing_type=postgresql.ARRAY(sa.TEXT()), nullable=True)
    op.drop_column("tokens", "updated")
    op.alter_column(
        "templates",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column("templates", "text", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("templates", "name", existing_type=sa.TEXT(), nullable=True)
    op.drop_column("templates", "updated")
    op.alter_column(
        "stores",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "stores",
        "templates",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "stores",
        "plugin_settings",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "stores",
        "theme_settings",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "stores",
        "checkout_settings",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "stores",
        "email_settings",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column("stores", "default_currency", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("stores", "name", existing_type=sa.TEXT(), nullable=True)
    op.drop_column("stores", "updated")
    op.alter_column("settings", "value", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("settings", "name", existing_type=sa.TEXT(), nullable=True)
    op.drop_column("settings", "updated")
    op.alter_column(
        "refunds",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column("refunds", "currency", existing_type=sa.TEXT(), nullable=True)
    op.drop_column("refunds", "updated")
    op.alter_column("productsxinvoices", "count", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column(
        "products",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "products",
        "templates",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column("products", "name", existing_type=sa.TEXT(), nullable=True)
    op.drop_column("products", "updated")
    op.alter_column(
        "payouts",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column("payouts", "currency", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("payouts", "destination", existing_type=sa.TEXT(), nullable=True)
    op.drop_column("payouts", "updated")
    op.alter_column(
        "paymentmethods",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column("paymentmethods", "is_used", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column("paymentmethods", "divisibility", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("paymentmethods", "lightning", existing_type=sa.BOOLEAN(), nullable=True)
    op.alter_column("paymentmethods", "lookup_field", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("paymentmethods", "symbol", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("paymentmethods", "currency", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("paymentmethods", "rate", existing_type=sa.NUMERIC(precision=36, scale=18), nullable=True)
    op.drop_column("paymentmethods", "updated")
    op.alter_column(
        "notifications",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column(
        "notifications",
        "data",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column("notifications", "provider", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("notifications", "name", existing_type=sa.TEXT(), nullable=True)
    op.drop_column("notifications", "updated")
    op.alter_column(
        "invoices",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column("invoices", "tx_hashes", existing_type=postgresql.ARRAY(sa.TEXT()), nullable=True)
    op.alter_column("invoices", "expiration", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("invoices", "currency", existing_type=sa.TEXT(), nullable=True)
    op.drop_column("invoices", "updated")
    op.alter_column(
        "files",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.drop_column("files", "updated")
    op.alter_column(
        "discounts",
        "metadata",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=postgresql.JSON(astext_type=sa.Text()),
        nullable=True,
    )
    op.alter_column("discounts", "percent", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("discounts", "name", existing_type=sa.TEXT(), nullable=True)
    op.drop_column("discounts", "updated")

    op.drop_constraint(op.f("walletsxstores_store_id_stores_fkey"), "walletsxstores", type_="foreignkey")
    op.drop_constraint(op.f("walletsxstores_wallet_id_wallets_fkey"), "walletsxstores", type_="foreignkey")
    op.create_foreign_key(
        op.f("walletsxstores_store_id_stores_fkey"), "walletsxstores", "stores", ["store_id"], ["id"], ondelete="SET NULL"
    )
    op.create_foreign_key(
        op.f("walletsxstores_wallet_id_wallets_fkey"), "walletsxstores", "wallets", ["wallet_id"], ["id"], ondelete="SET NULL"
    )
    op.alter_column("walletsxstores", "store_id", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("walletsxstores", "wallet_id", existing_type=sa.TEXT(), nullable=True)
    op.drop_constraint(op.f("productsxinvoices_product_id_products_fkey"), "productsxinvoices", type_="foreignkey")
    op.drop_constraint(op.f("productsxinvoices_invoice_id_invoices_fkey"), "productsxinvoices", type_="foreignkey")
    op.create_foreign_key(
        op.f("productsxinvoices_invoice_id_invoices_fkey"),
        "productsxinvoices",
        "invoices",
        ["invoice_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        op.f("productsxinvoices_product_id_products_fkey"),
        "productsxinvoices",
        "products",
        ["product_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.alter_column("productsxinvoices", "invoice_id", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("productsxinvoices", "product_id", existing_type=sa.TEXT(), nullable=True)
    op.drop_constraint(
        op.f("notificationsxstores_notification_id_notifications_fkey"), "notificationsxstores", type_="foreignkey"
    )
    op.drop_constraint(op.f("notificationsxstores_store_id_stores_fkey"), "notificationsxstores", type_="foreignkey")
    op.create_foreign_key(
        op.f("notificationsxstores_notification_id_notifications_fkey"),
        "notificationsxstores",
        "notifications",
        ["notification_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        op.f("notificationsxstores_store_id_stores_fkey"),
        "notificationsxstores",
        "stores",
        ["store_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.alter_column("notificationsxstores", "store_id", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("notificationsxstores", "notification_id", existing_type=sa.TEXT(), nullable=True)
    op.drop_constraint(op.f("discountsxproducts_discount_id_discounts_fkey"), "discountsxproducts", type_="foreignkey")
    op.drop_constraint(op.f("discountsxproducts_product_id_products_fkey"), "discountsxproducts", type_="foreignkey")
    op.create_foreign_key(
        op.f("discountsxproducts_product_id_products_fkey"),
        "discountsxproducts",
        "products",
        ["product_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        op.f("discountsxproducts_discount_id_discounts_fkey"),
        "discountsxproducts",
        "discounts",
        ["discount_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.alter_column("discountsxproducts", "product_id", existing_type=sa.TEXT(), nullable=True)
    op.alter_column("discountsxproducts", "discount_id", existing_type=sa.TEXT(), nullable=True)
    # ### end Alembic commands ###
