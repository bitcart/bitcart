[project]
name = "bitcart-api"
version = "1.0.0"
description = "Bitcart Merchants API"
requires-python = ">=3.12"
dependencies = ["python-decouple"]

[dependency-groups]
lint = ["mypy>=1.13.0", "pre-commit>=4.3.0", "ruff>=0.9.5"]
test = [
    "fakeredis>=2.31.1",
    "filelock>=3.19.1",
    "httpx>=0.28.1",
    "httpx-ws>=0.7.2",
    "pytest>=8.3.5",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.15.0",
    "pytest-parametrization>=2022.2.1", # TODO: drop it
    "pytest-xdist>=3.8.0",
]
types = [
    "types-aiofiles>=24.1.0.20250822",
    "types-paramiko>=4.0.0.20250822",
    "types-python-dateutil>=2.9.0.20250822",
]
web = [
    "advanced-alchemy>=0.26.2",
    "aiofiles>=24.1.0",
    "alembic>=1.16.1",
    "apprise>=1.9.4",
    "asyncpg>=0.30.0",
    "bitcart>=1.18.0.0",
    "dishka>=1.4.2",
    "fastapi>=0.115.6",
    "faststream[redis]<=0.5.42",                # TODO: update when dishka integration is fixed
    "fido2>=2.0.0",
    "jinja2>=3.1.6",
    "jsonschema>=4.25.1",
    "logfire[fastapi,redis,sqlalchemy]>=2.7.1",
    "msgpack>=1.1.1",
    "paramiko>=4.0.0",
    "pwdlib[bcrypt]>=0.2.1",
    "py-machineid>=0.8.0",
    "pydantic-settings>=2.7.0",
    "pydantic[email]>=2.10.3",
    "pyotp>=2.9.0",
    "python-dateutil>=2.9.0",
    "python-multipart>=0.0.20",
    "python-ulid[pydantic]>=3.0.0",
    "redis[hiredis]>=5.2.1",
    "scalar-fastapi>=1.4.0",
    "sentry-sdk[fastapi,sqlalchemy]",
    "sqlalchemy[asyncio]>=2.0.36",
    "structlog>=24.4.0",
    "uvicorn[standard]>=0.34.0",
]
production = ["gunicorn>=23.0.0"]

# daemons
daemon-base = ["aiohttp<4.0"]
btc-based = [{ include-group = "daemon-base" }]
btc-derived = [
    { include-group = "btc-based" },
    "electrum-ecc @ git+https://github.com/bitcart/electrum-ecc@d90e8c79fb7d83fdea9ad0de94dce07f836f69bb",
]
eth-based = [
    { include-group = "daemon-base" },
    "aiolimiter",
    "mnemonic",
    "web3>=7,<8",
]

# sort alphabetically
bch = [
    { include-group = "btc-based" },
    "electron-cash @ https://github.com/Electron-Cash/Electron-Cash/archive/9fcc5b52e737cb1f34ed258c83cbfb62c31fc70d.zip",
]
bnb = [{ include-group = "eth-based" }]
btc = [
    { include-group = "btc-derived" },
    "electrum[crypto] @ git+https://github.com/spesmilo/electrum@0f4d8d6d57bbff3428950cf531bc98eae473beec",
]
eth = [{ include-group = "eth-based" }]
grs = [
    { include-group = "btc-derived" },
    "electrum-grs[crypto] @ git+https://github.com/Groestlcoin/electrum-grs@a10de858525b7045b835a840200cf9fcff3bfe9e",
]
ltc = [
    { include-group = "btc-derived" },
    "electrum-ltc[crypto] @ git+https://github.com/bitcart/electrum-ltc@5fd99314de302d9ed3c90537643f2e0ba82c1f02",
    "scrypt>=0.6.0",
]
matic = [{ include-group = "eth-based" }]
trx = [{ include-group = "eth-based" }, "async-lru", "tronpy", "trontxsize"]
xmr = [{ include-group = "daemon-base" }, "monero", "universalasync"]
xrg = [
    { include-group = "btc-based" },
    "oregano @ https://github.com/Ergon-moe/Oregano/archive/6bf78d3be864c053c95ee332c6ab366e5695d8a4.zip",
]

daemons = [
    { include-group = "bch" },
    { include-group = "bnb" },
    { include-group = "btc" },
    { include-group = "eth" },
    { include-group = "grs" },
    { include-group = "ltc" },
    { include-group = "matic" },
    { include-group = "trx" },
    { include-group = "xmr" },
    { include-group = "xrg" },
]

# all groups
dev = [
    { include-group = "lint" },
    { include-group = "test" },
    { include-group = "web" },
    { include-group = "types" },
    { include-group = "daemons" },
    { include-group = "production" },
    "taskipy>=1.14.1",
]

[tool.uv]
override-dependencies = ["protobuf<6", "python-dateutil>=2.9.0"]
config-settings = { "electrum_ecc.dont_compile" = "1" }

[tool.taskipy.tasks]
api = { cmd = "uvicorn --factory main:configure_production_app --timeout-graceful-shutdown 1 --reload", help = "run api service" }
worker = { cmd = "python3 worker.py", help = "run worker service" }
production = { cmd = "gunicorn -c gunicorn.conf.py \"main:configure_production_app()\"", help = "run api service in production" }
lint = { cmd = "ruff format . && ruff check --fix .", help = "run linters with autofix" }
lint_check = { cmd = "ruff format --check . && ruff check .", help = "run ruff linter" }
lint_types = { cmd = "mypy api tests main.py worker.py", help = "run mypy type verify" }
test = { cmd = "pytest ${TEST_ARGS}", help = "run tests" }
functional = { cmd = "BTC_LIGHTNING=true pytest tests/functional/ --cov-append -n 0 ${TEST_ARGS}", help = "run functional tests" }
new_migration = { cmd = "alembic revision --autogenerate -m \"${MESSAGE}\"", help = "create new migration" }
db_migration = { cmd = "task new_migration", help = "create new migration" }
db_migrate = { cmd = "alembic upgrade head", help = "run alembic upgrade" }
db_rollback = { cmd = "alembic downgrade -1", help = "run alembic downgrade" }
ci = { cmd = "task lint_check && task lint_types && task test", help = "run ci checks" }

[tool.ruff]
target-version = "py312"
line-length = 127

[tool.ruff.lint]
select = [
    "F",
    "E",
    "I",
    "UP",
    "YTT",
    "B",
    "T10",
    "C",
    "SIM",
    "RUF100",
    "RET",
    "A",
    "S",
    "ASYNC",
    "TID",
    "PLC0415",
    "T201",
]
preview = true
unfixable = ["F401"]
ignore = [
    "RET502",
    "RET503",
    "S104",
    "S507",
    "ASYNC110",
    "A005",
    "PLC0415",
] # Enable PLC0415 when ready
mccabe = { max-complexity = 12 }

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S"]
"scripts/*" = ["S", "T201"]
".circleci/*" = ["S"]
"daemons/*" = ["T201"]
"backups/*" = ["T201"]

[tool.ruff.lint.isort]
known-third-party = ["bitcart"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.params.Depends",
    "fastapi.Query",
    "fastapi.params.Query",
    "fastapi.Path",
    "fastapi.params.Path",
    "fastapi.Body",
    "fastapi.params.Body",
    "fastapi.Form",
    "fastapi.params.Form",
    "fastapi.Header",
    "fastapi.params.Header",
    "fastapi.File",
    "fastapi.params.File",
    "fastapi.Cookie",
    "fastapi.params.Cookie",
    "fastapi.Security",
    "fastapi.params.Security",
]

[tool.mypy]
ignore_missing_imports = true
plugins = ["pydantic.mypy"]
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
strict_equality = true
disallow_untyped_defs = true
skip_cache_mtime_checks = true
exclude = ["daemons", "backups"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
addopts = ["-n", "auto", "--cov=api", "--cov-report", "term-missing"]
filterwarnings = [
    "error::DeprecationWarning",
    "error::PendingDeprecationWarning",
    "ignore:Support for class-based `config` is deprecated:DeprecationWarning", # scalar-fastapi
]
norecursedirs = ["tests/functional"]
